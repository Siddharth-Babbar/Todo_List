{"version":3,"sources":["Form.jsx","Todo.jsx","FilterButton.jsx","TodoMatic.jsx","App.js","index.js"],"names":["Form","props","useState","task","setTask","action","onSubmit","e","preventDefault","addTask","htmlFor","type","id","onChange","target","value","Todo","isEditing","setIsEditing","newName","setNewName","editTemplate","editTask","name","onClick","viewTemplate","defaultChecked","completed","toggleTaskComplete","deleteTask","FilterButton","setFilter","Filters","All","Active","Completed","FilterNames","Object","keys","TodoMatic","setTasks","filter","updatedTasks","JSON","parse","localStorage","getItem","map","setItem","stringify","remainingTasks","editedTasks","FilterList","taskList","headingNoun","length","heading","newTask","Math","random","lsGet","tList","push","App","className","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.23a68134.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const Form = (props) => {\r\n  const [task, setTask] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.addTask(task);\r\n\r\n    setTask(\"\");\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form action=\"#\" onSubmit={handleSubmit}>\r\n      <h2>\r\n        <label htmlFor=\"new-todo-input\"></label>\r\n        Add Tasks\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        onChange={handleChange}\r\n        value={task}\r\n      />\r\n      <button type=\"submit\">Add</button>\r\n    </form>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const Todo = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setNewName(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setIsEditing(false);\r\n  };\r\n\r\n  // const edit = () => {};\r\n  const editTemplate = (\r\n    <form action=\"#\" onSubmit={handleSubmit}>\r\n      <div>\r\n        <label htmlFor={props.id}>New name for {props.name}</label>\r\n        <input\r\n          id={props.id}\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={newName}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsEditing(false);\r\n          }}\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Save</button>\r\n      </div>\r\n    </form>\r\n  );\r\n  const viewTemplate = (\r\n    <div>\r\n      <div>\r\n        <input\r\n          type=\"checkBox\"\r\n          id=\"status\"\r\n          defaultChecked={props.completed}\r\n          onChange={() => {\r\n            props.toggleTaskComplete(props.id);\r\n          }}\r\n        />\r\n        <label htmlFor=\"status\">{props.name}</label>\r\n      </div>\r\n      <div>\r\n        <button\r\n          id=\"edit\"\r\n          onClick={() => {\r\n            setIsEditing(true);\r\n          }}\r\n        >\r\n          Edit Task\r\n        </button>\r\n        <button\r\n          id=\"remove\"\r\n          onClick={() => {\r\n            props.deleteTask(props.id);\r\n          }}\r\n        >\r\n          Remove Task\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n  return <li>{isEditing ? editTemplate : viewTemplate}</li>;\r\n};\r\n","export const FilterButton = (props) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={() => {\r\n        props.setFilter(props.name);\r\n      }}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Form } from \"./Form\";\r\nimport { Todo } from \"./Todo\";\r\nimport { FilterButton } from \"./FilterButton\";\r\n\r\nconst Filters = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed\r\n};\r\nconst FilterNames = Object.keys(Filters);\r\nexport const TodoMatic = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [filter, setFilter] = useState(\"All\");\r\n  // const ul = document.getElementsByTagName(\"ul\");\r\n\r\n  // let tasks = [];\r\n\r\n  // useEffect(() => {\r\n  //   viewTodo();\r\n  // }, []);\r\n\r\n  // const viewTodo = () => {\r\n  //   if (localStorage.getItem(\"tasks\"))\r\n  //     setTodoList(JSON.parse(localStorage.getItem(\"tasks\")));\r\n  // };\r\n\r\n  // const stampTodo = () => {};\r\n\r\n  // const add = (e) => {\r\n  //   if (e != null) {\r\n  //     e.preventDefault();\r\n\r\n  //     if (todo == \"\") {\r\n  //       alert(\"Enter Task\");\r\n  //       return;\r\n  //     }\r\n  //   }\r\n\r\n  //   if (localStorage.getItem(\"tasks\")) {\r\n  //     tasks = JSON.parse(localStorage.getItem(\"tasks\"));\r\n  //   }\r\n\r\n  //   tasks.push(todo);\r\n  //   // console.log(JSON.stringify(tasks));\r\n  //   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n\r\n  //   setTodo(\"\");\r\n  //   setTodoList(tasks);\r\n  // };\r\n\r\n  // const remove = (tods) => {\r\n  //   todoList.splice(todoList.indexOf(tods), 1);\r\n\r\n  //   localStorage.setItem(\"tasks\", JSON.stringify(todoList));\r\n  // };\r\n\r\n  // const edit = (tods) => {\r\n  //   remove(tods);\r\n  //   setTodo(tods);\r\n  //   add();\r\n  // };\r\n\r\n  // const show = () => {};\r\n\r\n  // ---------------------------------------------\r\n\r\n  const addTask = (name) => {\r\n    const newTask = {\r\n      name: name,\r\n      id: \"todo\" + Math.random() * 1000,\r\n      completed: false\r\n    };\r\n\r\n    const lsGet = localStorage.getItem(\"tasks\");\r\n    const tList = lsGet ? JSON.parse(lsGet) : [];\r\n\r\n    tList.push(newTask);\r\n\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tList));\r\n\r\n    setTasks(tList);\r\n  };\r\n\r\n  const toggleTaskComplete = (id) => {\r\n    const updatedTasks = JSON.parse(localStorage.getItem(\"tasks\")).map(\r\n      (task) => {\r\n        if (task.id === id) {\r\n          return { ...task, completed: !task.completed };\r\n        }\r\n        return task;\r\n      }\r\n    );\r\n    localStorage.setItem(\"tasks\", JSON.stringify(updatedTasks));\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const deleteTask = (id) => {\r\n    const remainingTasks = JSON.parse(localStorage.getItem(\"tasks\")).filter(\r\n      (task) => id !== task.id\r\n    );\r\n    localStorage.setItem(\"tasks\", JSON.stringify(remainingTasks));\r\n\r\n    setTasks(remainingTasks);\r\n  };\r\n\r\n  const editTask = (id, newName) => {\r\n    const editedTasks = JSON.parse(localStorage.getItem(\"tasks\")).map(\r\n      (task) => {\r\n        if (id === task.id) return { ...task, name: newName };\r\n        return task;\r\n      }\r\n    );\r\n    localStorage.setItem(\"tasks\", JSON.stringify(editedTasks));\r\n    setTasks(editedTasks);\r\n  };\r\n\r\n  const FilterList = FilterNames.map((name) => (\r\n    <FilterButton name={name} key={name} setFilter={setFilter} />\r\n  ));\r\n\r\n  const taskList = localStorage.getItem(\"tasks\")\r\n    ? JSON.parse(localStorage.getItem(\"tasks\"))\r\n        .filter(Filters[filter])\r\n        .map((task) => (\r\n          <Todo\r\n            name={task.name}\r\n            key={task.id}\r\n            id={task.id}\r\n            completed={task.completed}\r\n            toggleTaskComplete={toggleTaskComplete}\r\n            deleteTask={deleteTask}\r\n            editTask={editTask}\r\n          />\r\n        ))\r\n    : [];\r\n\r\n  const headingNoun = taskList.length > 1 ? \"tasks\" : \"task\";\r\n  const heading = `${taskList.length} ${headingNoun}`;\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Form addTask={addTask} />\r\n      </div>\r\n      <div>\r\n        {FilterList}\r\n        <h2>{heading}</h2>\r\n        <ul>{taskList}</ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// import \"./styles.css\";\nimport { TodoMatic } from \"./TodoMatic\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Todo List</h1>\n      <TodoMatic />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}